<?php
/*
This file 'soldat_server.php' is part of the PPS project <http://code.google.com/p/fracsnetpps/>

Copyright: (C) 2014 Arthur, B. aka ]{ing <whinemore@gmail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.
 .
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 .
*/

//include 'server.php';

class soldat_server extends ppsserver {
    public $m_adminlog;
    
    public $State;
    
    public $stats; /* Note: Initialize outside the class! */
    public $pps;    
    
    public $refresh;
    public $m_timeout;

    public $type = SERVER_TYPE_SOLDAT;

    public function __construct($pps, $ip, $port, $adminlog, $timeout = 10, $reconnect = true ){
        $this->pps = $pps;
        $this->ip = $ip;
        $this->port = $port;
        $this->m_adminlog = $adminlog;
        $this->m_timeout = $timeout;
        $this->m_retry = $reconnect;   
        
        $this->State = 0;
        $this->State |= FRESH;
        
        $this->stats = null;
        $this->join_try = null;
        
        $this->sock = socket_create( AF_INET, SOCK_STREAM, SOL_TCP );
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */   
    public function connect($timeout = 0){
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */        
        $this->m_timeout = $timeout;
        
        if( !socket_connect( $this->sock, $this->ip, $this->port) ){
            $this->State |= DISCONNECTED;
            return 1; /* Error */
        }else{
            $logstr = $this->m_adminlog . "\r\n";
            socket_write( $this->sock, $logstr );
            $this->State = CONNECTED;
            $this->connected = true;
        }
    }
    
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function get_info() 
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        echo "GET REFRESHX\n";
        $refresh = $this->get_refreshx();
        $info = "[$this->ip:$this->port] : " . $refresh['players'] . "/12  Map: ". $refresh['map'];
        return $info;
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function get_refreshx() {
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
        $sock = fsockopen( $this->ip, $this->port );
        fputs( $sock, "$this->m_adminlog\r\n" );
        fputs( $sock, "REFRESHX\r\n" );
        $version = null;
        $info = null;
        while( $data = trim(fgets($sock, 1024)) ) {
            if( preg_match('/^Server Version: (.+)$/', $data, $match) ) {
                $version = $match[1];
            }
            else if( $data == "REFRESHX" ) {
                $packet = fread( $sock, RefreshXSize($version) );
                $info = ParseRefresh($packet, $version);
                break;
            }
        }

        fclose($sock);
        return $info;
    }  

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function send( $data ) 
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        socket_write( $this->sock, "$data\r\n" );
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function readbuffer() 
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        if( !$this->sock ) return;
        $this->buffer = trim( socket_read($this->sock, 1024, PHP_BINARY_READ) );
        $this->parse_buffer();
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function private_message($id, $message)
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
       $this->send( "/pm $id $message" ); 
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function parse_buffer()
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {   if( !$this->buffer ) return;

        $lines = explode( "\r\n", $this->buffer );
        foreach( $lines as $line ) {
            $this->parse_line( $line );
        }
    }

    //Parse a line from the Soldat server
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function parse_line( $line ) {
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
        echo "$line\n";

        $cmd = substr( $line, 0, 5 );
        if(method_exists( 'soldat_server', $cmd) ) {
            $this->$cmd( $line );
            return;
        }
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function PKILL( $line ) 
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        $this->stats->ch_kill( $line );
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function PJOIN( $line ) {
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
        if( !$this->pps->m_SQL_ON  ) {
            $this->pps->connect_mysql();
        }
        $this->stats->ch_join( $line );
        $this->pps->m_TPC++;
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function PLEFT( $line ) 
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        $this->stats->ch_left( $line );
        $this->pps->m_TPC--;
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function NXMAP( $line )
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        $this->stats->ch_nextmap( $line );
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function PGRAB( $line )
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        if( $this->stats->T->pc > 1 )
            $this->stats->ch_grab( $line );
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function PCAPF( $line )
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        if( $this->stats->T->pc > 1 )
            $this->stats->ch_cap( $line );
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function PRETF( $line )
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        if( $this->stats->T->pc > 1 )
            $this->stats->ch_return( $line );
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function PRATE( $line )
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        $name = substr( $line, 5 );
        if( $this->stats->T->is_playing($name) ) { 
            $P = &$this->stats->T->ps[$name];
            $this->private_message( $P->p_id, "Rating: " . round($P->rating,2) );
        }
    }

	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    public function RCODE( $line )
	/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */    
    {
        $name = substr( $line, 5);
        if( $this->stats->T->is_playing($name) ) {
            $P = &$this->stats->T->ps[$name];
            $this->private_message( $P->p_id, "Secret Code: $P->code" );
        }
    }

}
?>
